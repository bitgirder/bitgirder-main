package com.bitgirder.mingle.model;

import com.bitgirder.validation.Inputs;
import com.bitgirder.validation.State;

import com.bitgirder.lang.path.ObjectPath;

import com.bitgirder.mingle.parser.MingleParsers;

import java.nio.ByteBuffer;

public
final
class MingleSymbolMapAccessor
{
    private final static Inputs inputs = new Inputs();
    private final static State state = new State();

    private final MingleSymbolMap map;
    private final ObjectPath< MingleIdentifier > path;

    private
    MingleSymbolMapAccessor( MingleSymbolMap map,
                             ObjectPath< MingleIdentifier > path )
    {
        this.map = map;
        this.path = path;
    }

    public ObjectPath< MingleIdentifier > getPath() { return path; }
    public MingleSymbolMap getBackingMap() { return map; }

    private
    MingleValue
    access( MingleIdentifier key,
            String keyParamName,
            boolean expct )
    {
        if ( keyParamName != null ) inputs.notNull( key, keyParamName );
 
        MingleValue res = map.get( key );
        if ( res instanceof MingleNull ) res = null;

        if ( res == null && expct ) 
        {
            throw new MingleValidationException( 
                "value is null", path.descend( key ) );
        }
        else return res;
    }

    private
    MingleIdentifier
    getKey( CharSequence key,   
            String keyParamName )
    {
        inputs.notNull( key, keyParamName );
        return MingleParsers.createIdentifier( key );
    }

    private
    MingleValue
    access( CharSequence key,
            String keyParamName,
            boolean expct )
    {
        return access( getKey( key, keyParamName ), null, expct );
    }

    private
    < V extends MingleValue >
    V
    cast( MingleTypeReference typ,
          MingleValue v,
          Class< V > retCls )
    {
        if ( v == null ) return null;
        else 
        {
            return retCls.cast( MingleModels.asMingleInstance( typ, v, path ) );
        }
    }

    private
    MingleSymbolMapAccessor
    makeSymbolMapAccessor( MingleIdentifier key,
                           String keyParamName,
                           boolean expct )
    {
        MingleSymbolMap resMap =
            cast( 
                MingleModels.TYPE_REF_MINGLE_SYMBOL_MAP, 
                access( key, keyParamName, expct ),
                MingleSymbolMap.class
            );

        if ( resMap == null ) return null;
        else return new MingleSymbolMapAccessor( resMap, path.descend( key ) );
    }

    public
    MingleSymbolMapAccessor
    expectSymbolMapAccessor( MingleIdentifier key )
    {
        return makeSymbolMapAccessor( key, "key", true );
    }

    public
    MingleSymbolMapAccessor
    expectSymbolMapAccessor( CharSequence key )
    {
        return makeSymbolMapAccessor( getKey( key, "key" ), null, true );
    }

    public
    MingleSymbolMapAccessor
    getSymbolMapAccessor( MingleIdentifier key )
    {
        return makeSymbolMapAccessor( key, "key", false );
    }

    public
    MingleSymbolMapAccessor
    getSymbolMapAccessor( CharSequence key )
    {
        return makeSymbolMapAccessor( getKey( key, "key" ), null, false );
    }

    public
    MingleValue
    expectMingleValue( MingleIdentifier key )
    {
        return access( key, "key", true );
    }
    
    public
    MingleValue
    expectMingleValue( CharSequence key )
    {
        return access( key, "key", true );
    }

    public
    MingleValue
    getMingleValue( MingleIdentifier key )
    {
        return access( key, "key", false );
    }
    
    public
    MingleValue
    getMingleValue( CharSequence key )
    {
        return access( key, "key", false );
    }

    // Begin autogenerated accessors

    public
    MingleString
    expectMingleString( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_STRING, 
                access( key, "key", true ),
                MingleString.class
            ); 
    }

    public
    MingleString
    expectMingleString( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_STRING, 
                access( key, "key", true ),
                MingleString.class
            ); 
    }

    public
    MingleString
    getMingleString( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_STRING, 
                access( key, "key", false ),
                MingleString.class
            ); 
    }

    public
    MingleString
    getMingleString( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_STRING, 
                access( key, "key", false ),
                MingleString.class
            ); 
    }

    public
    MingleInt64
    expectMingleInt64( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_INT64, 
                access( key, "key", true ),
                MingleInt64.class
            ); 
    }

    public
    MingleInt64
    expectMingleInt64( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_INT64, 
                access( key, "key", true ),
                MingleInt64.class
            ); 
    }

    public
    MingleInt64
    getMingleInt64( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_INT64, 
                access( key, "key", false ),
                MingleInt64.class
            ); 
    }

    public
    MingleInt64
    getMingleInt64( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_INT64, 
                access( key, "key", false ),
                MingleInt64.class
            ); 
    }

    public
    MingleInt32
    expectMingleInt32( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_INT32, 
                access( key, "key", true ),
                MingleInt32.class
            ); 
    }

    public
    MingleInt32
    expectMingleInt32( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_INT32, 
                access( key, "key", true ),
                MingleInt32.class
            ); 
    }

    public
    MingleInt32
    getMingleInt32( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_INT32, 
                access( key, "key", false ),
                MingleInt32.class
            ); 
    }

    public
    MingleInt32
    getMingleInt32( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_INT32, 
                access( key, "key", false ),
                MingleInt32.class
            ); 
    }

    public
    MingleDouble
    expectMingleDouble( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_DOUBLE, 
                access( key, "key", true ),
                MingleDouble.class
            ); 
    }

    public
    MingleDouble
    expectMingleDouble( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_DOUBLE, 
                access( key, "key", true ),
                MingleDouble.class
            ); 
    }

    public
    MingleDouble
    getMingleDouble( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_DOUBLE, 
                access( key, "key", false ),
                MingleDouble.class
            ); 
    }

    public
    MingleDouble
    getMingleDouble( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_DOUBLE, 
                access( key, "key", false ),
                MingleDouble.class
            ); 
    }

    public
    MingleFloat
    expectMingleFloat( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_FLOAT, 
                access( key, "key", true ),
                MingleFloat.class
            ); 
    }

    public
    MingleFloat
    expectMingleFloat( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_FLOAT, 
                access( key, "key", true ),
                MingleFloat.class
            ); 
    }

    public
    MingleFloat
    getMingleFloat( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_FLOAT, 
                access( key, "key", false ),
                MingleFloat.class
            ); 
    }

    public
    MingleFloat
    getMingleFloat( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_FLOAT, 
                access( key, "key", false ),
                MingleFloat.class
            ); 
    }

    public
    MingleBoolean
    expectMingleBoolean( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_BOOLEAN, 
                access( key, "key", true ),
                MingleBoolean.class
            ); 
    }

    public
    MingleBoolean
    expectMingleBoolean( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_BOOLEAN, 
                access( key, "key", true ),
                MingleBoolean.class
            ); 
    }

    public
    MingleBoolean
    getMingleBoolean( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_BOOLEAN, 
                access( key, "key", false ),
                MingleBoolean.class
            ); 
    }

    public
    MingleBoolean
    getMingleBoolean( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_BOOLEAN, 
                access( key, "key", false ),
                MingleBoolean.class
            ); 
    }

    public
    MingleTimestamp
    expectMingleTimestamp( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_TIMESTAMP, 
                access( key, "key", true ),
                MingleTimestamp.class
            ); 
    }

    public
    MingleTimestamp
    expectMingleTimestamp( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_TIMESTAMP, 
                access( key, "key", true ),
                MingleTimestamp.class
            ); 
    }

    public
    MingleTimestamp
    getMingleTimestamp( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_TIMESTAMP, 
                access( key, "key", false ),
                MingleTimestamp.class
            ); 
    }

    public
    MingleTimestamp
    getMingleTimestamp( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_TIMESTAMP, 
                access( key, "key", false ),
                MingleTimestamp.class
            ); 
    }

    public
    MingleBuffer
    expectMingleBuffer( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_BUFFER, 
                access( key, "key", true ),
                MingleBuffer.class
            ); 
    }

    public
    MingleBuffer
    expectMingleBuffer( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_BUFFER, 
                access( key, "key", true ),
                MingleBuffer.class
            ); 
    }

    public
    MingleBuffer
    getMingleBuffer( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_BUFFER, 
                access( key, "key", false ),
                MingleBuffer.class
            ); 
    }

    public
    MingleBuffer
    getMingleBuffer( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_BUFFER, 
                access( key, "key", false ),
                MingleBuffer.class
            ); 
    }

    public
    MingleEnum
    expectMingleEnum( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_ENUM, 
                access( key, "key", true ),
                MingleEnum.class
            ); 
    }

    public
    MingleEnum
    expectMingleEnum( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_ENUM, 
                access( key, "key", true ),
                MingleEnum.class
            ); 
    }

    public
    MingleEnum
    getMingleEnum( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_ENUM, 
                access( key, "key", false ),
                MingleEnum.class
            ); 
    }

    public
    MingleEnum
    getMingleEnum( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_ENUM, 
                access( key, "key", false ),
                MingleEnum.class
            ); 
    }

    public
    MingleException
    expectMingleException( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_EXCEPTION, 
                access( key, "key", true ),
                MingleException.class
            ); 
    }

    public
    MingleException
    expectMingleException( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_EXCEPTION, 
                access( key, "key", true ),
                MingleException.class
            ); 
    }

    public
    MingleException
    getMingleException( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_EXCEPTION, 
                access( key, "key", false ),
                MingleException.class
            ); 
    }

    public
    MingleException
    getMingleException( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_EXCEPTION, 
                access( key, "key", false ),
                MingleException.class
            ); 
    }

    public
    MingleList
    expectMingleList( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_VALUE_LIST, 
                access( key, "key", true ),
                MingleList.class
            ); 
    }

    public
    MingleList
    expectMingleList( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_VALUE_LIST, 
                access( key, "key", true ),
                MingleList.class
            ); 
    }

    public
    MingleList
    getMingleList( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_VALUE_LIST, 
                access( key, "key", false ),
                MingleList.class
            ); 
    }

    public
    MingleList
    getMingleList( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_VALUE_LIST, 
                access( key, "key", false ),
                MingleList.class
            ); 
    }

    public
    MingleSymbolMap
    expectMingleSymbolMap( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_SYMBOL_MAP, 
                access( key, "key", true ),
                MingleSymbolMap.class
            ); 
    }

    public
    MingleSymbolMap
    expectMingleSymbolMap( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_SYMBOL_MAP, 
                access( key, "key", true ),
                MingleSymbolMap.class
            ); 
    }

    public
    MingleSymbolMap
    getMingleSymbolMap( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_SYMBOL_MAP, 
                access( key, "key", false ),
                MingleSymbolMap.class
            ); 
    }

    public
    MingleSymbolMap
    getMingleSymbolMap( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_SYMBOL_MAP, 
                access( key, "key", false ),
                MingleSymbolMap.class
            ); 
    }

    public
    MingleStruct
    expectMingleStruct( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_STRUCT, 
                access( key, "key", true ),
                MingleStruct.class
            ); 
    }

    public
    MingleStruct
    expectMingleStruct( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_STRUCT, 
                access( key, "key", true ),
                MingleStruct.class
            ); 
    }

    public
    MingleStruct
    getMingleStruct( MingleIdentifier key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_STRUCT, 
                access( key, "key", false ),
                MingleStruct.class
            ); 
    }

    public
    MingleStruct
    getMingleStruct( CharSequence key )
    {
        return 
            cast( 
                MingleModels.TYPE_REF_MINGLE_STRUCT, 
                access( key, "key", false ),
                MingleStruct.class
            ); 
    }

    // End autogenerated accessors;

    private
    int
    extractInt( MingleInt64 mi )
    {
        return mi == null ? 0 : mi.intValue();
    }

    public
    int
    expectInt( MingleIdentifier key )
    {
        return extractInt( expectMingleInt64( key ) );
    }

    public
    int
    expectInt( CharSequence key )
    {
        return extractInt( expectMingleInt64( key ) );
    }

    public
    int
    getInt( MingleIdentifier key )
    {
        return extractInt( getMingleInt64( key ) );
    }
    
    public
    int
    getInt( CharSequence key )
    {
        return extractInt( getMingleInt64( key ) );
    }

    private
    long
    extractLong( MingleInt64 mi )
    {
        return mi == null ? 0 : mi.longValue();
    }

    public
    long
    expectLong( MingleIdentifier key )
    {
        return extractLong( expectMingleInt64( key ) );
    }

    public
    long
    expectLong( CharSequence key )
    {
        return extractLong( expectMingleInt64( key ) );
    }

    public
    long
    getLong( MingleIdentifier key )
    {
        return extractLong( getMingleInt64( key ) );
    }
    
    public
    long
    getLong( CharSequence key )
    {
        return extractLong( getMingleInt64( key ) );
    }

    private
    double
    extractDouble( MingleDouble d )
    {
        return d == null ? 0.0d : d.doubleValue();
    }

    public
    double
    expectDouble( MingleIdentifier key )
    {
        return extractDouble( expectMingleDouble( key ) );
    }

    public
    double
    expectDouble( CharSequence key )
    {
        return extractDouble( expectMingleDouble( key ) );
    }

    public
    double
    getDouble( MingleIdentifier key )
    {
        return extractDouble( getMingleDouble( key ) );
    }

    public
    double
    getDouble( CharSequence key )
    {
        return extractDouble( getMingleDouble( key ) );
    }

    private
    boolean
    extractBoolean( MingleBoolean b )
    {
        return b != null && b.booleanValue();
    }

    public
    boolean
    expectBoolean( MingleIdentifier key )
    {
        return extractBoolean( expectMingleBoolean( key ) );
    }

    public
    boolean
    expectBoolean( CharSequence key )
    {
        return extractBoolean( expectMingleBoolean( key ) );
    }

    public
    boolean
    getBoolean( MingleIdentifier key )
    {
        return extractBoolean( getMingleBoolean( key ) );
    }

    public
    boolean
    getBoolean( CharSequence key )
    {
        return extractBoolean( getMingleBoolean( key ) );
    }

    private
    ByteBuffer
    extractByteBuffer( MingleBuffer buf )
    {
        return buf == null ? null : buf.getByteBuffer();
    }

    public
    ByteBuffer
    expectByteBuffer( MingleIdentifier key )
    {
        return extractByteBuffer( expectMingleBuffer( key ) );
    }

    public
    ByteBuffer
    expectByteBuffer( CharSequence key )
    {
        return extractByteBuffer( expectMingleBuffer( key ) );
    }

    public
    ByteBuffer
    getByteBuffer( MingleIdentifier key )
    {
        return extractByteBuffer( getMingleBuffer( key ) );
    }

    public
    ByteBuffer
    getByteBuffer( CharSequence key )
    {
        return extractByteBuffer( getMingleBuffer( key ) );
    }

    private
    String
    extractString( MingleString s )
    {
        return s == null ? null : s.toString();
    }

    public
    String
    expectString( MingleIdentifier key )
    {
        return extractString( expectMingleString( key ) );
    }

    public
    String
    expectString( CharSequence key )
    {
        return extractString( expectMingleString( key ) );
    }

    public
    String
    getString( MingleIdentifier key )
    {
        return extractString( getMingleString( key ) );
    }

    public
    String
    getString( CharSequence key )
    {
        return extractString( getMingleString( key ) );
    }

    private
    MingleListIterator
    makeListIterator( MingleList l,
                      MingleIdentifier key )
    {
        if ( l == null ) return null;
        else return MingleListIterator.forList( l, path.descend( key ) );
    }

    public
    MingleListIterator
    getMingleListIterator( MingleIdentifier key )
    {
        return makeListIterator( getMingleList( key ), key );
    }

    public
    MingleListIterator
    expectMingleListIterator( MingleIdentifier key )
    {
        return makeListIterator( expectMingleList( key ), key );
    }

    public
    MingleListIterator
    getMingleListIterator( CharSequence key )
    {
        return getMingleListIterator( getKey( key, "key" ) );
    }

    public
    MingleListIterator
    expectMingleListIterator( CharSequence key )
    {
        return expectMingleListIterator( getKey( key, "key" ) );
    }

    public
    static
    MingleSymbolMapAccessor
    create( MingleSymbolMap map,
            ObjectPath< MingleIdentifier > path )
    {
        inputs.notNull( map, "map" );
        inputs.notNull( path, "path" );

        return new MingleSymbolMapAccessor( map, path );
    }

    public
    static
    MingleSymbolMapAccessor
    create( MingleStructure ms,
            ObjectPath< MingleIdentifier > path )
    {
        return create( inputs.notNull( ms, "ms" ).getFields(), path );
    }

    public
    static
    MingleSymbolMapAccessor
    create( MingleSymbolMap map )
    {
        return create( map, ObjectPath.< MingleIdentifier >getRoot() );
    }

    public
    static
    MingleSymbolMapAccessor
    create( MingleStructure ms )
    {
        return create( inputs.notNull( ms, "ms" ).getFields() );
    }
}

//TYPES = %w{ MingleString
//            MingleInt64
//            MingleInt32
//            MingleDouble
//            MingleFloat
//            MingleBoolean
//            MingleTimestamp
//            MingleBuffer
//            MingleEnum
//            MingleException
//            MingleList
//            MingleSymbolMap
//            MingleStruct 
//        }
//
//TYPES.each { |typ|
//    
//    typ_const = 
//        case typ
//
//            when "MingleSymbolMap"
//                "MingleModels.TYPE_REF_MINGLE_SYMBOL_MAP"
//
//            when "MingleList"
//                "MingleModels.TYPE_REF_MINGLE_VALUE_LIST"
//
//            else "MingleModels.TYPE_REF_MINGLE_#{typ[ 6 .. -1 ].upcase}"
//        end
//
//    [ { :mode => "expect", :expect => "true" },
//      { :mode => "get", :expect => "false" } ].each { |mode|
//
//      %w{ MingleIdentifier CharSequence }.each { |key_typ|
//
//      puts <<EOF
//
//    public
//    #{typ}
//    #{mode[ :mode ]}#{typ}( #{key_typ} key )
//    {
//        return 
//            cast( 
//                #{typ_const}, 
//                access( key, "key", #{mode[ :expect ]} ),
//                #{typ}.class
//            ); 
//    }
//EOF
//        }
//    }
//}
