# Identifiers that pass (input, ext-form expected)
"test", "test"
"test1", "test1"
"test_stuff", "test-stuff"
"test-stuff", "test-stuff"
"testStuff", "test-stuff"
"test-one-two", "test-one-two"
"test_one_two", "test-one-two"
"testOneTwo", "test-one-two"
"test2-stuff2", "test2-stuff2"
"test2_stuff2", "test2-stuff2"
"test2Stuff2", "test2-stuff2"
"multiADJAcentCaps", "multi-a-d-j-acent-caps"

# Identifiers that fail (input, err pos start (1-indexed), sample err msg)
"2bad", 1, "Invalid part beginning: 2" 
"2", 1, "Invalid part beginning: 2" 
"bad-2", 5, "Invalid part beginning: 2" 
"bad-2bad", 5, "Invalid part beginning: 2" 
"bad-@", 5, "Invalid character: @"
"bad-A", 5, "Invalid part beginning: A"
"AcapCannotStart", 1, "Invalid part beginning: A" 
"-leading-dash", 1, "Invalid part beginning: -"
"_leading_underscore", 1, "Invalid part beginning: _"

"giving-mixedMessages", 13, 
    "Mixed identifier formats: LC_HYPHENATED and LC_CAMEL_CAPPED"
            
"too--many-dashes", 5, "Invalid part beginning: -" 
"too__many_underscores", 5, "Invalid part beginning: _"
"trailing-dash-", 14, "Trailing separator: -" 
"trailing_underscore_", 20, "Trailing separator: _" 
"a-bad-ch@r", 8, "Invalid character: @"
"", 0, "Empty string"

# Namespaces that pass
"ns@v1"
"ns1:ns2:ns3@v1"
"nsIdent1:nsIdent2:ns3@v1"
"ns-ident1:ns-ident2:ns3@v1"

# Namespaces that fail
"2bad:ns@v1", 1, "Expected identifier but got: 2" 
"ns:2bad@v1", 4, "Expected identifier but got: 2" 
"ns1:ns2", -1, "Unexpected end of input" 
"ns1:ns2:", -1, "Unexpected end of input" 
"ns1:ns2:@v1", 9, "Expected identifier but got: '@'" 
"ns1:non-camel-capped-ident:noGood@v1", 8, "Expected '@' but got '-'" 
"ns1.ns2@v1", 4, "Expected '@' but got '.'" 
"ns1 : ns2:ns3@v1", 4, "Expected '@' but got: whitespace" 
"ns1:ns2@v1/Stuff", 11, "Trailing input" 
"@v1", 1, "Expected identifier but got: '@'" 
"ns1@V2", 5, "Invalid part beginning: V" 
"ns1:ns2@v1:ns3", 11, "Trailing input"
"ns1:ns2@v1@v2", 11, "Multiple versions specified"
"ns1@", -1, "Unexpected end of input" 
"ns1@ v1", 5, "Expected identifier but got: whitespace" 

# DeclaredTypeNames that pass
"T"
"T1"
"T1T2"
"BlahBlah3Blah"
"TUVWX"

# DeclaredTypeNames that fail
"a", 1, "Type name cannot start with 'a' (U+0061)"
"aBadName", 1, "Type name cannot start with 'a'"
"2", 1, "Type name cannot start with '2'"
"2Bad", 1, "Type name cannot start with '2'"
"Bad$Char", 4, "Invalid type name character '$'"
"Bad_Char", 4, "Invalid type name character '_'"
"Bad-Char", 4, "Invalid type name character '-'"
"", 0, "Empty declared type name"

# Qnames that pass
"ns1@v1/T1"
"ns1:ns2@v1/T1/T2"

# Qnames that fail
"ns1@v1", 7, "Qname has no type path"
"ns1/T1", 4, "Missing version"
"ns1@v1/T1/2Bad", 11, "Illegal type name start"
"ns1@v1/", 8, "Expected type name"
"ns1@v1/T1/", 11, "Expected type name"
"ns1@v1/T1//T2/T3", 11, "Type name cannot start with '/' (U+002f)"
"ns1@v1/T1#T2", 10, "Invalid type name character '#' (U+0023)"

# Relative type names that pass
"T1"
"T1/T2"
"T1/T2/T3"

# Relative type names that fail
"ns1:ns2@v1/T1", 1, "Relative type name cannot start with 'n' (U+006e)"
"/T1/T2", 1, "Relative type name cannot start with '/' (U+002f)"
"T1/T2/", 7, "Expected type name"
"T1/T2//T3", 7, "Type name cannot start with '/' (U+002f)"
"abc", 1, "Relative type name cannot start with 'a' (U+0061)"
"T1/abc", 4, "Type name cannot start with 'a' (U+0061)"

# Type refs that pass
"Stuff"
"Stuff*"
"Stuff?"
"Stuff?*+**"
"mingle:core@v1/String"
"mingle:core@v1/String*"
"ns1:ns2@v1/T1/T2"
"ns1:ns2@v1/T1/T2*+?"
"String1~\"^a+$\""
"String1 ~\n\t\"a*\"", "String1~\"a*\""
"ns1:ns2@v1/String~\"B*\""
"ns1:ns2@v1/String~\"a|b*\"*+"
"mingle:core@v1/String~\"a$\""
"Num~[1,-2]"
"Num~(,8]?*"
"Num~( 8, )"
"Num~(-100,100)?"
"Num~(,)"
"Str~[\"a\",\"aaaa\")"
"Num~[-3,- 5]", ?, "(fail to parse: ws after -)"
"Stuff~\"a\"", 6, "Restrictions not supported for Stuff"
"ns1:ns2@v1/Blah~\"a\"", 16, 
    "Don't know how to apply string restriction to ns1:ns2@v1/Blah"
"mingle:core@v1/String~\"ab[a-z\"", 22, 
    "Invalid regex: Unclosed character class (near index 5)"
"ns1@v1/Blah~[1,2]", 12,
    "Don't know how to apply range restriction to ns1@v1/Blah"
"mingle:core@v1/Int64~\"a*$\"", 21,
    "Don't know how to apply string restriction to mingle:core@v1/Int64"
"mingle:core@v1/Int64~[,12)", 21, "Infinite low range must be open"
"mingle:core@v1/Int64~[12,]", 21, "Infinite high range must be open"
"mingle:core@v1/Int64~[12,10]", 21, "max < min ( 10 < 12 )"
"mingle:core@v1/Int64~(1.0,2.0)", 21, "Invalid integer literal" 
"mingle:core@v1/Int64~(\"1.0\",2.0)", 21, "Invalid integer literal"
"mingle:core@v1/Buffer~[1,2]", 22,
    "Don't know how to apply range restriction to mingle:core@v1/Buffer"

# Type refs that do not pass (includes a sample of those that
# are just bad qnames or bad relnames)
"T1/T2/", 7, "Expected type name"
"T1/T2//T3", 7, "Type name cannot start with '/' (U+002f)"
"ns1@v1/bad", 8, "Type name cannot start with 'a' (U+0061)"
"ns1@v1/T1*?-+", 12, "Illegal type quantifier '-' (U+002d)"
"ns1@v1/T1*? +", 12, "Illegal type quantifier ' ' (U+0020)"
"String~", -1, "Unexpected end of input"
"mingle:core@v1/~\"s*\"", 16, "Expected type name but got: '~'"
"mingle:core@v1~\"s*\"", 15, "Invalid type name"
"mingle:core@v1/String ~= \"sdf\"", 24, "Unexpected token start: =" 
"Int~(1:2)", 7, "Expected ',' but got ':'"
"Int~[1,3}", 9, "Invalid range delimiter: }"
"Int~[abc,2)", 6, "Invalid range literal: abc"
"Int~[--3,4)", 7, "Can't negate value: -"
"Int~[,]", 4, "Infinite range must be open"
"Int~[8,]", 4, "Infinite high range must be open"
"Int~[,8]", 4, "Infinite low range must be open"
"S1~12.1", 3, "Unexpected restriction"

# Identified names that pass
"some:ns@v1/someId1"
"some:ns@v1/someId1/someId2"
"some:ns@v1/someId1/some-id2/some_id3"
"singleNs@v1/singleIdent"
 
"someNs@v1", 10, "Missing name"
"some:ns@v1", 11, "Missing name"
"some:ns@v1/", 12, "Expected identifier"
"some:ns@v3/trailingSlash/", 26, "Expected identifier"
"some:ns@v1/SomeId", 12, "Invalid part beginning: S"
"", 0, "Empty name"

"/some:ns@v1/noGood/leadingSlash", 1, 
    "Illegal start of identifier part: '/' (U+002f)"
