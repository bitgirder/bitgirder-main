#!/usr/bin/env ruby

require 'bitgirder/core'
include BitGirder::Core

require 'bitgirder/io'

require 'bitgirder/ops/java'
include BitGirder::Ops::Java

require 'rexml/document'

require 'socket'

ENV_TOMCAT7_RUNTIME = "TOMCAT7_RUNTIME"

class Command < BitGirderClass

    include BitGirder::Io

    private
    def load_config( f )
        load_yaml( f )
    end
end

class Help < Command

    public
    def run( run_ctx )
 
        print "\ncommands:\n\n"
        COMMANDS.keys.sort.each { |s| puts "#{ " " * 4 }#{s}" }
        puts

    end
end

class TomcatConfig < BitGirderClass
    
    bg_attr :control_port, validation: :positive
    bg_attr :http_port, validation: :positive, required: false
    bg_attr :https_port, validation: :positive, required: false

    bg_attr :shutdown_string
    
    bg_attr :tomcat_home, validation: :file_exists

    bg_attr :java_home,     
            validation: :file_exists,
            default: lambda { JavaEnvironments.get_java_home }
    
    bg_attr :sysprops, default: lambda { {} }

    bg_attr :classpath_dirs, default: lambda { [] }
end

PORT_OPTS = { validation: :positive, processor: :integer }

def tomcat7_dir( base )
    "#{base}/tomcat7"
end

class Install < Command

    PROTO_HTTP11 = "HTTP/1.1"

    bg_attr :install_to

    bg_attr :install_opts, validation: :file_exists
 
    bg_attr :tomcat_home, validation: :file_exists

    bg_attr :wipe_install, required: false, processor: :boolean

    private
    def impl_initialize
        
        if @https_port && ( ! @ssl_keystore )
            raise "Cannot configure SSL without at least a keystore"
        end

        if @ssl_keystore && ( ! @https_port )
            raise "Need a port for SSL listener"
        end
    end

    private
    def base_dir( dir )
        "#{tomcat7_dir( @install_to )}/#{dir}"
    end

    # Scoped to its own method to reduce risk of local vars in eval'd code
    # stomping on something in this script
    private
    def eval_install_opts
        eval( IO::read( @install_opts ), binding, @install_opts )
    end

    private
    def expect_install_opt( opts, key )
        
        opts[ key ] or raise "No value in install opts for #{key.inspect}"
    end

    private
    def init_config( tc_opts )

        defls = { 
            shutdown_string: rand( 2 ** 128 ).to_s( 16 ),
            tomcat_home: @tomcat_home
        }

        @config = TomcatConfig.new( defls.merge( tc_opts ) )
    end

    private
    def process_install_opts

        opts = eval_install_opts
        init_config( expect_install_opt( opts, :tomcat_opts ) )
        @webapps = expect_install_opt( opts, :webapps )
        @ssl_opts = opts[ :ssl_opts ] || {}
    end

    private
    def setup_install_dir
        
        if File.exist?( @install_to )
            if @wipe_install 
                fu().rm_rf( @install_to )
            else
                raise "Install dir #@install_to exists (--wipe-install?)"
            end
        end

        %w{ conf logs webapps work temp }.each do |dir| 
            ensure_dir( base_dir( dir ) )
        end
 
        fu().cp( "#@tomcat_home/conf/web.xml", base_dir( "conf" ) )
    end

    private
    def new_elt( name, attrs )
        
        res = REXML::Element.new( name.to_s )

        attrs.each_pair do |k, v| 
            res.add_attribute( k.to_s, v.to_s ) unless v.nil?
        end

        res
    end

    private
    def add_listener_elts( doc )
        
        %w{ org.apache.catalina.core.JasperListener
            org.apache.catalina.core.JreMemoryLeakPreventionListener
            org.apache.catalina.mbeans.GlobalResourcesLifecycleListener
            org.apache.catalina.core.ThreadLocalLeakPreventionListener 
        }.
        each { |s| doc.root << new_elt( :Listener, :className => s ) }
    end

    private
    def add_http_connector( svc )

        svc << new_elt( :Connector,
            :port => @config.http_port,
            :protocol => PROTO_HTTP11,
            :connectionTimeout => 20000,
            :redirectPort => @config.https_port
        )
    end

    private
    def add_https_connector( svc )
        
        attrs = {
            :port => @config.https_port,
            :protocol => PROTO_HTTP11,
            :SSLEnabled => true,
            :maxThreads => 150,
            :scheme => "https",
            :secure => true,
            :clientAuth => false,
            :sslProtocol => :TLS
        }

        attrs.merge!( @ssl_opts )

        svc << new_elt( :Connector, attrs )
    end

    private
    def add_engine( svc )
        
        eng = new_elt( :Engine, name: "Catalina", defaultHost: "localhost" )

        valve = new_elt( :Valve,
            className: "org.apache.catalina.valves.AccessLogValve",
            directory: "logs",
            prefix: "localhost_access_log.",
            suffix: ".txt",
            pattern: '%h %l %u %t "%r" %s %b'
        )

        host = new_elt( :Host,
            name: "localhost",
            appBase: "webapps",
            unpackWARs: true,
            autoDeply: true
        )

        host << valve
        eng << host
        svc << eng
    end

    private
    def add_service_elt( doc )
 
        doc.root << ( svc = new_elt( :Service, :name => "Catalina" ) )

        add_http_connector( svc ) if @config.http_port
        add_https_connector( svc ) if @config.https_port

        add_engine( svc )
    end

    private
    def build_server_conf
        
        doc = REXML::Document.new
        doc << REXML::XMLDecl.new( "1.0", "utf-8" )

        doc << new_elt( :Server, 
            port: @config.control_port, 
            shutdown: @config.shutdown_string
        )

        add_listener_elts( doc )
        add_service_elt( doc )
        
        doc
    end

    private
    def write_server_conf
        
        doc = build_server_conf
 
        File.open( "#{base_dir( :conf )}/server.xml", "w" ) do |io| 
            doc.write( io, 4 )
            io.print "\n"
        end
    end

    private
    def install_webapps
       
        @webapps.each do |app|
 
            dest, src = *app
            dest = ensure_parent( dest )
            fu().ln_s( src, "#{base_dir( :webapps )}/#{dest}" )
        end
    end

    private
    def write_config
        dump_yaml( @config, "#@install_to/config.yaml" )
    end

    public
    def run
 
        process_install_opts
        setup_install_dir
        write_server_conf
        install_webapps
        write_config
    end
end

class TomcatProcessBuilder < BitGirderClass
    
    bg_attr :runtime

    bg_attr :config

    bg_attr :proc_opts, default: lambda { {} }

    include BitGirder::Io

    private
    def get_run_classpath
 
        res = %w{ bootstrap.jar tomcat-juli.jar }.map do |f|
            file_exists( "#{@config.tomcat_home}/bin/#{f}" )
        end

        res += @config.classpath_dirs

        res
    end

    private
    def get_config_sysprops
        {}
    end

    private
    def get_run_sysprops
 
        cat_home = @config.tomcat_home
        cat_base = tomcat7_dir( @runtime )

        res = {

            "java.util.logging.config.file" =>
                file_exists( "#{cat_home}/conf/logging.properties" ),

            "java.util.logging.manager" =>
                "org.apache.juli.ClassLoaderLogManager",
 
            "catalina.base" => cat_base,
            "catalina.home" => cat_home,

            "java.io.tmpdir" => file_exists( "#{cat_base}/temp" )
        }

        res.merge( @config.sysprops )
    end

    private
    def get_run_argv
        %w{ start }
    end

    public
    def build
 
        JavaRunner.create_application_runner(
            java_env: JavaEnvironment.new( java_home: @config.java_home ),
            command: "java",
            classpath: get_run_classpath,
            sys_props: get_run_sysprops,
            main: "org.apache.catalina.startup.Bootstrap",
            argv: get_run_argv,
            proc_opts: @proc_opts
        ).
        process_builder
    end
end

class RuntimeCommand < Command
    
    bg_attr :runtime, 
            validation: :file_exists,
            processor: :expand_path,
            default: lambda {
                if ( v = ( ENV[ ENV_TOMCAT7_RUNTIME ] || "" ).strip ).empty?
                    nil
                else   
                    v
                end
            }
    
    include BitGirder::Io

    private
    def impl_initialize
        @config = load_config( file_exists( "#@runtime/config.yaml" ) )
    end

    private
    def pid_file
        "#@runtime/tomcat.pid"
    end
end

class Run < RuntimeCommand

    public
    def run

        TomcatProcessBuilder.
            new( config: @config, runtime: @runtime ).
            build.
            exec
    end
end

class Daemon < RuntimeCommand

    private
    def do_start
 
        b = TomcatProcessBuilder.new( config: @config, runtime: @runtime )

        if File.exist?( pid_file )
            raise "Tomcat already running (or stale pid file #{pid_file})"
        end

        Process.daemon

        File.open( pid_file, "w" ) { |io| io.puts $$ }
        
        out = "#{tomcat7_dir( @runtime )}/logs/catalina.out"
        code( "Sending daemon output to #{out}" )
        b.proc_opts[ [ STDOUT, STDERR ] ] = File.open( out, "a" )

        b.build.exec
    end

    private
    def get_current_pid
        
        if File.exist?( f = pid_file )
            File.open( f ) { |io| io.gets.to_i }
        else
            raise "No pid file (#{f}) present. Tomcat not running?"
        end
    end

    private
    def send_shutdown
        
        begin
            sock = TCPSocket::new( "localhost", @config.control_port )
    
            begin
                sock.puts @config.shutdown_string
            ensure
                sock.close
            end

        rescue Errno::ECONNREFUSED
        end
    end

    private
    def await_port_close( port )
        
        3.times do |i|
            begin
                TCPSocket.new( "localhost", port ).close
                code( "Still got a connection at :#{port}; will retry" )
                sleep( 2 )
            rescue Errno::ECONNREFUSED
                return true
            end
        end

        return false
    end

    private
    def await_srv_close
        
        to_check = [ @config.control_port ]
        to_check << @config.http_port if @config.http_port
        to_check << @config.https_port if @config.https_port
        
        # Returns true if and only if all ports are seen closed
        ! to_check.find do |port|
            ! await_port_close( port )
        end
    end

    private
    def do_stop
        
        pid = get_current_pid
        
        send_shutdown
        
        unless await_srv_close
            code( "Server appears to still be running; sending KILL to #{pid}" )
            Process.kill( "KILL", pid )
        end

        fu().rm( pid_file )
    end

    private
    def do_restart
        
        do_stop
        do_start
    end

    private
    def do_wipe_pid
        
        fu().rm( pid_file ) if File.exist?( pid_file )
    end
 
    public
    def run( run_ctx )
 
        cmd = run_ctx[ :argv_remain ].shift or raise "Need a daemon command"
        meth = :"do_#{cmd.gsub( "-", "_" )}"

        if respond_to?( meth, true )
            send( meth )
        else
            raise "Unknown daemon command: #{cmd}"
        end
    end
end

class Tailf < RuntimeCommand

    public
    def run
        
        UnixProcessBuilder.new(
            cmd: "tail",
            argv: [ "-f" ] + Dir.glob( "#{tomcat7_dir( @runtime )}/logs/*" )
        ).
        exec
    end
end

COMMANDS = {
    install: Install,
    run: Run,
    daemon: Daemon,
    tailf: Tailf,
    help: Help
}

def get_command_cls
    
    idx = ARGV.find_index { |arg| ! arg.start_with?( "-" ) }
    
    cmd_sym = idx ? ARGV.delete_at( idx ).to_sym : :help
 
    unless res = COMMANDS[ cmd_sym ]
        res = Help
        STDERR.puts( "Unrecognized command: #{cmd_sym}" )
    end

    res
end

BitGirderCliApplication.run( get_command_cls )
