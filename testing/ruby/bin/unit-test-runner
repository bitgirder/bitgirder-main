#!/usr/bin/env ruby

require 'bitgirder/core'
require 'bitgirder/testing'
require 'bitgirder/testing/engine'

include BitGirder::Testing
include BitGirder::Core

class App < AbstractApplication

    bg_attr :filter_pattern,
            :default => false,
            :processor => lambda { |s| s && Regexp.new( s ) }
    
    private
    def create_test_engine
        
        opts = {
            :event_handler => lambda { |ev, arg| code( "#{ev}: #{arg}" ) }
        }

        if @filter_pattern
            opts[ :filter ] = lambda { |inv| inv.name =~ @filter_pattern }
        end

        UnitTestEngine.new( opts )
    end

    private
    def emit( str )
        puts str
    end

    private
    def result_summary_add_invocations( res, eng )
        
        eng.results.each do |inv_set|
            inv_set.invocations.each_pair do |phase, invs|
                invs.each do |inv|

                    res[ :invocations ] << inv

                    if inv.phase == TestPhase::TEST
                        key = inv.error ? :failed : :succeeded
                        res[ key ] = res[ key ] + 1
                    end
                end
            end
        end
    end

    private
    def prepare_result_summary( eng )
        
        res = { :succeeded => 0, :failed => 0, :invocations => [] }
        
        result_summary_add_invocations( res, eng )

        res[ :invocations ].sort! do |i1, i2|
            
            case
            when ( ! i1.error ) && i2.error then -1
            when i1.error && ( ! i2.error ) then 1
            else i1 <=> i2
            end
        end

        res
    end

    private
    def report_inv_result( inv )

        emit( 
            sprintf( "%s %s in %0.3fs", 
                inv, 
                inv.error ? "failed" : "succeeded",
                inv.end_time - inv.start_time
            )
        )

        if inv.error
            emit( "#{inv.error}: #{ inv.error.backtrace.join( "\n" ) }" )
        end
    end

    private
    def report_results( eng )
        
        summary = prepare_result_summary( eng )

        summary[ :invocations ].each { |inv| report_inv_result( inv ) }

        emit( "Run complete; #{ summary[ :succeeded ] } tests succeeded and " \
            "#{ summary[ :failed ] } failed" )
    end

    private
    def impl_run
        
        $bitgirder_is_test_runner_run = true
        argv_remain.each { |tf| require( tf ) }
        
        eng = create_test_engine
        eng.run
        report_results( eng )
    end
end

BitGirder::Core::BitGirderCliApplication.run( App )
