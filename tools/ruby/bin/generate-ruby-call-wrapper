#!/usr/bin/env ruby

require 'bitgirder/core'
include BitGirder::Core

require 'bitgirder/ops/ruby'
include BitGirder::Ops::Ruby

class App < BitGirderClass

    bg_attr :script, validation: :file_exists
    bg_attr :out_file
    bg_attr :ruby_dir, validation: :file_exists

    bg_attr :include_dir, 
            validation: :file_exists, 
            is_list: true,
            default: []

    bg_attr :script_perm,
            processor: lambda { |v| v.to_i( 8 ) },
            default: 0755

    include BitGirder::Io

    private
    def get_ruby_incl_dirs

        res = RubyIncludes.get_ruby_include_dirs( ruby_home: @ruby_dir )
        res += @include_dir

        res = RubyIncludes.clean_include_dir_names( res )

        RubyIncludes.as_include_argv( res )
    end

    private
    def get_script_body
        
        ruby_bin = File.expand_path( file_exists( "#@ruby_dir/bin/ruby" ) )
        full_script = File.expand_path( @script )

        incl_dirs = get_ruby_incl_dirs

        <<-END_SCRIPT
#!#{ruby_bin}

# Autogenerated on #{Time.now} by #{File.expand_path( $0 )}
# with ARGV #{ARGV.inspect}

# cmd_bin is what we run, cmd_name is what we want reported in ps (See rdoc for
# Kernel.exec)
cmd_bin = #{ruby_bin.inspect}
cmd_name = #{File.expand_path( @out_file ).inspect}

# Various include dirs
argv = #{incl_dirs.inspect} 

# First arg to ruby is the script we wrap
argv << #{full_script.inspect}

# Whatever the user actually passed goes too
argv += ARGV 

# Off we go
Kernel.exec( [ cmd_bin, cmd_name ], *argv )
        END_SCRIPT
    end

    private
    def write_body( body )

        case @out_file

            when nil then print body

            else 
                File.open( ensure_parent( @out_file ), "w" ) do |io| 

                    io.puts( body )
                    io.chmod( @script_perm )
                end
        end
    end

    private
    def run
        
        code( "Wrapping #@script to run under ruby installation in #@ruby_dir" )
        body = get_script_body
        write_body( body )
    end
end

BitGirderCliApplication.run( App )
